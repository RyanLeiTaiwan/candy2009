/** File: gen_neg.cpp
 ** Author: Ryan Lei
 ** Creation: 2009/12/26
 ** Modification: 2009/12/28
 ** Description: Generate multiple negative images chopped
 **              from large ones.
 **/

/* Usage: gen_neg [INPUT_DIR] [OUTPUT_DIR] */ 

#include <iostream>
#include <cstring>
#include <cxcore.h>
#include <highgui.h>
#include <cv.h>
#include <dirent.h>
#include "global.h"
using namespace std;

int main(int argc, char *argv[]) {
	DIR *dirin, *dirout;
	struct dirent *dp;
	char INPUT_PATH_BASE[ MAX_PATH_LENGTH ];
	char INPUT_PATH[ MAX_PATH_LENGTH ];
	char OUTPUT_PATH_BASE[ MAX_PATH_LENGTH ];
	char OUTPUT_PATH[ MAX_PATH_LENGTH ];
	char slash = Unix ? '/' : '\\'; // It is '/' or '\' depending on OS
	
	if (argc != 3) {
		cout << "Usage: gen_neg [INPUT_DIR] [OUTPUT_DIR]" << endl;
		exit(EXIT_FAILURE);
	}
	
	if (!(dirin = opendir(argv[ 1 ]))) {
		cout << "gen_neg(): [INPUT_DIR] does not exist.\n";
		exit(EXIT_FAILURE);
	}
	/* Set INPUT_PATH_BASE to [INPUT_DIR] and append '/' or '\' */
	strcpy(INPUT_PATH_BASE, argv[ 1 ]);	
	sprintf(INPUT_PATH_BASE, "%s%c", INPUT_PATH_BASE, slash);
	
	if (!(dirout = opendir(argv[ 2 ]))) {
		cout << "gen_neg(): [OUTPUT_DIR] does not exist.\n";
		exit(EXIT_FAILURE);
	}
	closedir(dirout); // not needed for output
	/* Set OUTPUT_PATH_BASE to [OUTPUT_DIR] and append '/' or '\' */
	strcpy(OUTPUT_PATH_BASE, argv[ 2 ]);
	sprintf(OUTPUT_PATH_BASE, "%s%c", OUTPUT_PATH_BASE, slash);
	
	/** Command is correct **/
	cout << "This program will take in large-sized images in [INPUT_DIR],\n" <<
		"ASSUMING THE ASPECT RATIO is the same as " << LARGE_WIDTH << " : " << LARGE_HEIGHT << 
	", then:\n 1. Resize each image to exactly " << LARGE_WIDTH << " x "<< LARGE_HEIGHT << ".\n" <<
	" 2. Discard the 4 sides of the image by window size: " << WINDOW_WIDTH << " x " << WINDOW_HEIGHT << ",\n" <<
	"    and scan the rest of the image using the window.\n" <<
	" 3. write the scanned subimages into [OUTPUT_DIR]/genCOUNT_TOTAL.jpg,\n" <<
	"    where COUNT_TOTAL is an integer counting from 1.\n\n" <<
	"Press [Enter] to continue, or ctrl+C/D/Z to exit ...";
	getchar();
	
	int COUNT_TOTAL = 0; // # of subimages generated by all files 
	IplImage *img, *img_scale;
	/* For each image file in [INPUT_DIR] */
	while (dp = readdir(dirin)) {		
		/* The full input path is [INPUT_DIR] + "/" + FILENAME */
		strcpy(INPUT_PATH, INPUT_PATH_BASE);
		sprintf(INPUT_PATH, "%s%s", INPUT_PATH, dp->d_name);
		cout << INPUT_PATH << "   ......   ";

		/* Read the image */		
		if (img = cvLoadImage(INPUT_PATH, -1)) {
			/* Success on image read */
			/* 1. Resize it to WINDOW_WIDTH x WINDOW_HEIGHT */
			img_scale = cvCreateImage(cvSize(LARGE_WIDTH, LARGE_HEIGHT), img->depth, img->nChannels);
			cvResize(img, img_scale);
			cvReleaseImage(&img); // no longer needed
			/* 2. 3. For different ROI's (Regions of Interest) */
			int COUNT_SINGLE = 0; // # of subimages generated by a single file
			for (int x = WINDOW_WIDTH; x + WINDOW_WIDTH * 2 <= img_scale->width; x += WINDOW_WIDTH) {
				for (int y = WINDOW_HEIGHT; y + WINDOW_HEIGHT * 2 <= img_scale->height; y += WINDOW_HEIGHT, COUNT_SINGLE++) {
					//cout << "(" << x << "," << x + WINDOW_WIDTH - 1 << "," << y << "," << y + WINDOW_HEIGHT - 1 << ")\n";					
					/* Set ROI on the window */
					cvSetImageROI(img_scale, cvRect(x, y, WINDOW_WIDTH, WINDOW_HEIGHT));					

					/* The full output path is [OUTPUT_DIR] + "/" + genCOUNT_TOTAL.jpg */
					strcpy(OUTPUT_PATH, OUTPUT_PATH_BASE);
					sprintf(OUTPUT_PATH, "%sgen%d.jpg", OUTPUT_PATH, ++COUNT_TOTAL);
					//cout << "OUTPUT_PATH: " << OUTPUT_PATH << endl;
					/* Write to file */
					if (!cvSaveImage(OUTPUT_PATH, img_scale)) {
						cout << "cvSaveImage(): Failure\n";
						exit(EXIT_FAILURE);
					}				
				}
			}
			cvReleaseImage(&img_scale);
			cout << "done, generating " << COUNT_SINGLE << " subimages\n";
		}
		else {
			/* Failure on image read: skip this file */
			cout << "not an image\n";
		}

	}
	cout << "gen_neg(): Generated a total of " << COUNT_TOTAL << "images.\n";
	
	return 0;
}
